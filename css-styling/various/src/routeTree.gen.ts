/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TiltcardIndexImport } from './routes/tilt_card/index'
import { Route as SvgIndexImport } from './routes/svg/index'
import { Route as ReflectionIndexImport } from './routes/reflection/index'
import { Route as ParallaxscrollvideoIndexImport } from './routes/parallax_scroll_video/index'
import { Route as ParallaxscrollimageIndexImport } from './routes/parallax_scroll_image/index'
import { Route as GraphIndexImport } from './routes/graph/index'
import { Route as CarouselIndexImport } from './routes/carousel/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TiltcardIndexRoute = TiltcardIndexImport.update({
  id: '/tilt_card/',
  path: '/tilt_card/',
  getParentRoute: () => rootRoute,
} as any)

const SvgIndexRoute = SvgIndexImport.update({
  id: '/svg/',
  path: '/svg/',
  getParentRoute: () => rootRoute,
} as any)

const ReflectionIndexRoute = ReflectionIndexImport.update({
  id: '/reflection/',
  path: '/reflection/',
  getParentRoute: () => rootRoute,
} as any)

const ParallaxscrollvideoIndexRoute = ParallaxscrollvideoIndexImport.update({
  id: '/parallax_scroll_video/',
  path: '/parallax_scroll_video/',
  getParentRoute: () => rootRoute,
} as any)

const ParallaxscrollimageIndexRoute = ParallaxscrollimageIndexImport.update({
  id: '/parallax_scroll_image/',
  path: '/parallax_scroll_image/',
  getParentRoute: () => rootRoute,
} as any)

const GraphIndexRoute = GraphIndexImport.update({
  id: '/graph/',
  path: '/graph/',
  getParentRoute: () => rootRoute,
} as any)

const CarouselIndexRoute = CarouselIndexImport.update({
  id: '/carousel/',
  path: '/carousel/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/carousel/': {
      id: '/carousel/'
      path: '/carousel'
      fullPath: '/carousel'
      preLoaderRoute: typeof CarouselIndexImport
      parentRoute: typeof rootRoute
    }
    '/graph/': {
      id: '/graph/'
      path: '/graph'
      fullPath: '/graph'
      preLoaderRoute: typeof GraphIndexImport
      parentRoute: typeof rootRoute
    }
    '/parallax_scroll_image/': {
      id: '/parallax_scroll_image/'
      path: '/parallax_scroll_image'
      fullPath: '/parallax_scroll_image'
      preLoaderRoute: typeof ParallaxscrollimageIndexImport
      parentRoute: typeof rootRoute
    }
    '/parallax_scroll_video/': {
      id: '/parallax_scroll_video/'
      path: '/parallax_scroll_video'
      fullPath: '/parallax_scroll_video'
      preLoaderRoute: typeof ParallaxscrollvideoIndexImport
      parentRoute: typeof rootRoute
    }
    '/reflection/': {
      id: '/reflection/'
      path: '/reflection'
      fullPath: '/reflection'
      preLoaderRoute: typeof ReflectionIndexImport
      parentRoute: typeof rootRoute
    }
    '/svg/': {
      id: '/svg/'
      path: '/svg'
      fullPath: '/svg'
      preLoaderRoute: typeof SvgIndexImport
      parentRoute: typeof rootRoute
    }
    '/tilt_card/': {
      id: '/tilt_card/'
      path: '/tilt_card'
      fullPath: '/tilt_card'
      preLoaderRoute: typeof TiltcardIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/carousel': typeof CarouselIndexRoute
  '/graph': typeof GraphIndexRoute
  '/parallax_scroll_image': typeof ParallaxscrollimageIndexRoute
  '/parallax_scroll_video': typeof ParallaxscrollvideoIndexRoute
  '/reflection': typeof ReflectionIndexRoute
  '/svg': typeof SvgIndexRoute
  '/tilt_card': typeof TiltcardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/carousel': typeof CarouselIndexRoute
  '/graph': typeof GraphIndexRoute
  '/parallax_scroll_image': typeof ParallaxscrollimageIndexRoute
  '/parallax_scroll_video': typeof ParallaxscrollvideoIndexRoute
  '/reflection': typeof ReflectionIndexRoute
  '/svg': typeof SvgIndexRoute
  '/tilt_card': typeof TiltcardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/carousel/': typeof CarouselIndexRoute
  '/graph/': typeof GraphIndexRoute
  '/parallax_scroll_image/': typeof ParallaxscrollimageIndexRoute
  '/parallax_scroll_video/': typeof ParallaxscrollvideoIndexRoute
  '/reflection/': typeof ReflectionIndexRoute
  '/svg/': typeof SvgIndexRoute
  '/tilt_card/': typeof TiltcardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/carousel'
    | '/graph'
    | '/parallax_scroll_image'
    | '/parallax_scroll_video'
    | '/reflection'
    | '/svg'
    | '/tilt_card'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/carousel'
    | '/graph'
    | '/parallax_scroll_image'
    | '/parallax_scroll_video'
    | '/reflection'
    | '/svg'
    | '/tilt_card'
  id:
    | '__root__'
    | '/'
    | '/carousel/'
    | '/graph/'
    | '/parallax_scroll_image/'
    | '/parallax_scroll_video/'
    | '/reflection/'
    | '/svg/'
    | '/tilt_card/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CarouselIndexRoute: typeof CarouselIndexRoute
  GraphIndexRoute: typeof GraphIndexRoute
  ParallaxscrollimageIndexRoute: typeof ParallaxscrollimageIndexRoute
  ParallaxscrollvideoIndexRoute: typeof ParallaxscrollvideoIndexRoute
  ReflectionIndexRoute: typeof ReflectionIndexRoute
  SvgIndexRoute: typeof SvgIndexRoute
  TiltcardIndexRoute: typeof TiltcardIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CarouselIndexRoute: CarouselIndexRoute,
  GraphIndexRoute: GraphIndexRoute,
  ParallaxscrollimageIndexRoute: ParallaxscrollimageIndexRoute,
  ParallaxscrollvideoIndexRoute: ParallaxscrollvideoIndexRoute,
  ReflectionIndexRoute: ReflectionIndexRoute,
  SvgIndexRoute: SvgIndexRoute,
  TiltcardIndexRoute: TiltcardIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/carousel/",
        "/graph/",
        "/parallax_scroll_image/",
        "/parallax_scroll_video/",
        "/reflection/",
        "/svg/",
        "/tilt_card/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/carousel/": {
      "filePath": "carousel/index.tsx"
    },
    "/graph/": {
      "filePath": "graph/index.tsx"
    },
    "/parallax_scroll_image/": {
      "filePath": "parallax_scroll_image/index.tsx"
    },
    "/parallax_scroll_video/": {
      "filePath": "parallax_scroll_video/index.tsx"
    },
    "/reflection/": {
      "filePath": "reflection/index.tsx"
    },
    "/svg/": {
      "filePath": "svg/index.tsx"
    },
    "/tilt_card/": {
      "filePath": "tilt_card/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
